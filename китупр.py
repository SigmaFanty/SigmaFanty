#meta developer: @QzKat
from .. import loader, utils
from telethon.tl.types import Message

@loader.tds
class meinkita(loader.Module):
    """–ú–æ–¥—É–ª—å —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –Ω–∞—Å—Ç–æ—è—â–∏–º –º—ç–π–Ω–æ–º –∫—ñ—Ç–∞(—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —á—Ç–æ–±—ã —é–∑–∞—Ç—å –Ω–∞ –ø–æ—Å—Ç–æ—è–Ω–∫—É)."""
    strings = {"name": "MainKita"}

    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –∑–∞–º–µ–Ω—ã —Å–ª–æ–≤
    translate_map = {
        "–∏": "—ñ",
        "–ò": "—ñ",
        "—á—Ç–æ": "—à–æ",
        "–ß—Ç–æ": "—à–æ",
        "—á–µ": "—à–æ",
        "–ß–µ": "—à–æ",
        "—á–æ": "—à–æ",
        "–ß–æ": "—à–æ",
        "–≠": "—î",
        "–µ": "—î",
        "–µ": "—î",
        "—ç": "—î",
    }

    async def client_ready(self, client, db):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
        self.db = db
        self._client = client
        self.enabled = self.db.get("meinkita", "enabled", False)

    async def –∫–∏—Çcmd(self, message: Message):
        """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –∏–ª–∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –º–æ–¥—É–ª—è."""
        self.enabled = not self.enabled
        self.db.set("meinkita", "enabled", self.enabled)
        response_text = (
            "<b>—É—á–µ–Ω–∏–∫ –º—ç–π–Ω–∞ “õ—ñ—Ç–∞ –≤–∫–ª—é—á–µ–ΩüíÄ</b>"
            if self.enabled
            else "‚ùå <b>–Ø –±–æ–ª—å—à–µ –Ω–µ –º—ç–π–Ω “õ—ñ—Ç–∞ </b>"
        )
        return await utils.answer(message=message, response=response_text)

    def translate_text(self, text):
        """–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Å–ª–æ–≤–∞—Ä—è –∑–∞–º–µ–Ω—ã."""
        for key, value in self.translate_map.items():
            text = text.replace(key, value)
        return text

    async def watcher(self, message: Message):
        """–ù–∞–±–ª—é–¥–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–º–µ–Ω—è–µ—Ç —Ç–µ–∫—Å—Ç –≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö, –µ—Å–ª–∏ –º–æ–¥—É–ª—å –∞–∫—Ç–∏–≤–µ–Ω."""
        if self.enabled and message.out and message.text:
            translated_text = self.translate_text(message.text)
            if message.text != translated_text:
                await self._client.edit_message(
                    message.peer_id, 
                    message.id, 
                    translated_text
                )
