# meta developer: @QzKat
# meta banner: ShriftMod - –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, –º–æ–Ω–æ, —Ü–∏—Ç–∞—Ç–∞, —Å–∫—Ä—ã—Ç—ã–π, –∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤, –∫–æ–¥–æ–≤—ã–π 

import re
import logging
from .. import loader, utils

@loader.tds
class ShriftMod(loader.Module):
    """
    –ú–æ–¥—É–ª—å ShriftMod - –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, –º–æ–Ω–æ, —Ü–∏—Ç–∞—Ç–∞, —Å–∫—Ä—ã—Ç—ã–π, –∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤, –∫–æ–¥–æ–≤—ã–π
    """
    strings = {
        "name": "ShriftMod",
        "help": (
            "ü™ê –ú–æ–¥—É–ª—å ShriftMod –∑–∞–≥—Ä—É–∂–µ–Ω (‡πë‚Ä¢‚Äå „ÉÆ ‚Ä¢‚Äå‡πë)\n"
            "‚ÑπÔ∏è –ú–æ–¥—É–ª—å ShriftMod - –∞–≤—Ç–æ—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: –∂–∏—Ä–Ω—ã–π, –∫—É—Ä—Å–∏–≤, –º–æ–Ω–æ, —Ü–∏—Ç–∞—Ç–∞, —Å–∫—Ä—ã—Ç—ã–π, –∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤, –∫–æ–¥–æ–≤—ã–π \n\n"
            "‚ñ´Ô∏è 0bold –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n"
            "‚ñ´Ô∏è 0bolditalic –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω–æ–≥–æ –∫—É—Ä—Å–∏–≤–∞.\n"
            "‚ñ´Ô∏è 0code –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–¥–∞.\n"
            "‚ñ´Ô∏è 0hidden –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.\n"
            "‚ñ´Ô∏è 0italic –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –∫—É—Ä—Å–∏–≤.\n"
            "‚ñ´Ô∏è 0mono –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –º–æ–Ω–æ.\n"
            "‚ñ´Ô∏è 0quote –í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.\n\n"
            "ü´∂ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫: @QzKat"
        )
    }

    def __init__(self):
        self.mode = None  

    async def client_ready(self, client, db):
        self.client = client

    async def _toggle_mode(self, message, new_mode: str, mode_descr: str):
        if self.mode == new_mode:
            self.mode = None
            await message.edit(f"–†–µ–∂–∏–º ¬´{mode_descr}¬ª –≤—ã–∫–ª—é—á–µ–Ω.", parse_mode="html")
        else:
            self.mode = new_mode
            await message.edit(f"–†–µ–∂–∏–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {mode_descr}", parse_mode="html")

    async def boldcmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        await self._toggle_mode(message, "bold", "<b>–∂–∏—Ä–Ω—ã–π</b>")

    async def italiccmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –∫—É—Ä—Å–∏–≤."""
        await self._toggle_mode(message, "italic", "<i>–∫—É—Ä—Å–∏–≤</i>")

    async def monocmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –º–æ–Ω–æ."""
        await self._toggle_mode(message, "mono", "<code>–º–æ–Ω–æ</code>")

    async def quotecmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ü–∏—Ç–∏—Ä–æ–≤–∞–Ω–∏—è."""
        await self._toggle_mode(message, "quote", "<blockquote>—Ü–∏—Ç–∞—Ç–∞</blockquote>")

    async def hiddencmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Å–∫—Ä—ã—Ç–æ–≥–æ —Ç–µ–∫—Å—Ç–∞."""
        await self._toggle_mode(message, "hidden", "<tg-spoiler>—Å–∫—Ä—ã—Ç—ã–π</tg-spoiler>")

    async def bolditaliccmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —à—Ä–∏—Ñ—Ç –∂–∏—Ä–Ω–æ–≥–æ –∫—É—Ä—Å–∏–≤–∞."""
        await self._toggle_mode(message, "bolditalic", "<b><i>–∂–∏—Ä–Ω—ã–π –∫—É—Ä—Å–∏–≤</i></b>")

    async def codecmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º –∫–æ–¥–∞."""
        await self._toggle_mode(message, "codeblock", "```–∫–æ–¥–æ–≤—ã–π```")

    async def watcher(self, message):
        if self.mode is None:
            return

        text = message.raw_text
        text = re.sub(r'</?(?:b|i|code|tg-spoiler|blockquote)>', '', text, flags=re.IGNORECASE)

        if self.mode == "bold":
            new_text = f"<b>{text}</b>"
            parse_mode = "html"
        elif self.mode == "italic":
            new_text = f"<i>{text}</i>"
            parse_mode = "html"
        elif self.mode == "mono":
            new_text = f"<code>{text}</code>"
            parse_mode = "html"
        elif self.mode == "quote":
            new_text = f"<blockquote>{text}</blockquote>"
            parse_mode = "html"
        elif self.mode == "hidden":
            new_text = f"<tg-spoiler>{text}</tg-spoiler>"
            parse_mode = "html"
        elif self.mode == "bolditalic":
            new_text = f"<b><i>{text}</i></b>"
            parse_mode = "html"
        elif self.mode == "codeblock":
            new_text = f"```{text}```"
            parse_mode = "md"
        else:
            return

        try:
            await message.edit(new_text, parse_mode=parse_mode)
        except Exception as e:
            logging.error("ShriftMod: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", exc_info=e)